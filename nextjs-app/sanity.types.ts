/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type ListModule = {
  _type: "listModule";
  heading: string;
  items: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      _key: string;
    } & Link>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  indent?: boolean;
  link?: Link;
};

export type SliderModule = {
  _type: "sliderModule";
  items?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    video?: string;
    caption?: string;
    heading: string;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        _key: string;
      } & Link>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    _type: "sliderItem";
    _key: string;
  }>;
};

export type TextModule = {
  _type: "textModule";
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      _key: string;
    } & Link>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SplitTextModule = {
  _type: "splitTextModule";
  headingLeft: string;
  bodyLeft: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      _key: string;
    } & Link>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  linkLeft?: Link;
  headingRight: string;
  bodyRight: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      _key: string;
    } & Link>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  linkRight?: Link;
};

export type VideoModule = {
  _type: "videoModule";
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  video: string;
  text?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      _key: string;
    } & Link>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type HeroModule = {
  _type: "heroModule";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  heading?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      _key: string;
    } & Link>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      _key: string;
    } & Link>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SimplePortableText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: never;
  markDefs?: Array<{
    _key: string;
  } & Link>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type ComplexPortableText = Array<{
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  caption?: string;
  _type: "image";
  _key: string;
} | {
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "h2" | "h3" | "h4" | "normal" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    _key: string;
  } & Link>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Link = {
  _type: "link";
  title?: string;
  linkType: "page" | "href";
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "homepage";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "online";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "offline";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "textPage";
  };
  url?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  rows?: Array<{
    images: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    text: SimplePortableText;
    _type: "row";
    _key: string;
  }>;
};

export type FooterSettings = {
  _id: string;
  _type: "footerSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  heading?: string;
  items?: Array<{
    heading?: string;
    description?: string;
    _type: "offering";
    _key: string;
  }>;
  email?: string;
  nav?: Array<{
    _key: string;
  } & Link>;
};

export type HeaderSettings = {
  _id: string;
  _type: "headerSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  nav?: Array<{
    _key: string;
  } & Link>;
};

export type TextPage = {
  _id: string;
  _type: "textPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: Slug;
  body?: ComplexPortableText;
  seo?: Seo;
};

export type Offline = {
  _id: string;
  _type: "offline";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  projects?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
  seo?: Seo;
};

export type Online = {
  _id: string;
  _type: "online";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  modules?: Array<{
    _key: string;
  } & TextModule | {
    _key: string;
  } & VideoModule | {
    _key: string;
  } & SliderModule | {
    _key: string;
  } & ListModule>;
  seo?: Seo;
};

export type Homepage = {
  _id: string;
  _type: "homepage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  modules?: Array<{
    _key: string;
  } & HeroModule | {
    _key: string;
  } & VideoModule | {
    _key: string;
  } & SplitTextModule>;
  seo?: Seo;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Site = {
  _id: string;
  _type: "site";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  URL?: string;
  gtmID?: string;
  seo?: Seo;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Seo = {
  _type: "seo";
  title: string;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | ListModule | SliderModule | TextModule | SplitTextModule | VideoModule | HeroModule | SimplePortableText | ComplexPortableText | Link | Project | FooterSettings | HeaderSettings | TextPage | Offline | Online | Homepage | Slug | Site | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Seo | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_id == "site"][0]{  ...,  title,  URL,  gtmID,  seo{      ...,  metaTitle,  metaDesc,  shareTitle,  shareDesc,  shareGraphic  }}
export type SettingsQueryResult = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  URL: null;
  gtmID: null;
  seo: null;
} | {
  _id: string;
  _type: "footerSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  heading?: string;
  items?: Array<{
    heading?: string;
    description?: string;
    _type: "offering";
    _key: string;
  }>;
  email?: string;
  nav?: Array<{
    _key: string;
  } & Link>;
  title: null;
  URL: null;
  gtmID: null;
  seo: null;
} | {
  _id: string;
  _type: "headerSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  nav?: Array<{
    _key: string;
  } & Link>;
  title: null;
  URL: null;
  gtmID: null;
  seo: null;
} | {
  _id: string;
  _type: "homepage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  slug?: Slug;
  modules?: Array<{
    _key: string;
  } & HeroModule | {
    _key: string;
  } & SplitTextModule | {
    _key: string;
  } & VideoModule>;
  seo: {
    _type: "seo";
    title: string;
    description?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      metadataBase?: string;
      _type: "image";
    };
    metaTitle: null;
    metaDesc: null;
    shareTitle: null;
    shareDesc: null;
    shareGraphic: null;
  } | null;
  URL: null;
  gtmID: null;
} | {
  _id: string;
  _type: "offline";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  slug?: Slug;
  projects?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
  seo: {
    _type: "seo";
    title: string;
    description?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      metadataBase?: string;
      _type: "image";
    };
    metaTitle: null;
    metaDesc: null;
    shareTitle: null;
    shareDesc: null;
    shareGraphic: null;
  } | null;
  URL: null;
  gtmID: null;
} | {
  _id: string;
  _type: "online";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  slug?: Slug;
  modules?: Array<{
    _key: string;
  } & ListModule | {
    _key: string;
  } & SliderModule | {
    _key: string;
  } & TextModule | {
    _key: string;
  } & VideoModule>;
  seo: {
    _type: "seo";
    title: string;
    description?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      metadataBase?: string;
      _type: "image";
    };
    metaTitle: null;
    metaDesc: null;
    shareTitle: null;
    shareDesc: null;
    shareGraphic: null;
  } | null;
  URL: null;
  gtmID: null;
} | {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  rows?: Array<{
    images: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    text: SimplePortableText;
    _type: "row";
    _key: string;
  }>;
  URL: null;
  gtmID: null;
  seo: null;
} | {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title: string | null;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
  URL: null;
  gtmID: null;
  seo: null;
} | {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title: string | null;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
  URL: null;
  gtmID: null;
  seo: null;
} | {
  _id: string;
  _type: "site";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  URL: string | null;
  gtmID: string | null;
  seo: {
    _type: "seo";
    title: string;
    description?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      metadataBase?: string;
      _type: "image";
    };
    metaTitle: null;
    metaDesc: null;
    shareTitle: null;
    shareDesc: null;
    shareGraphic: null;
  } | null;
} | {
  _id: string;
  _type: "textPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  slug: Slug;
  body?: ComplexPortableText;
  seo: {
    _type: "seo";
    title: string;
    description?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      metadataBase?: string;
      _type: "image";
    };
    metaTitle: null;
    metaDesc: null;
    shareTitle: null;
    shareDesc: null;
    shareGraphic: null;
  } | null;
  URL: null;
  gtmID: null;
} | null;
// Variable: layoutQuery
// Query: {  "header": *[_id == "headerSettings"][0]{      ...,  nav[]{      ...,    page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }  },  logo  },  "footer": *[_id == "footerSettings"][0]{      logo,  heading,  email,  items,  nav[]{      ...,    page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }  }  }}
export type LayoutQueryResult = {
  header: {
    _id: string;
    _type: "assist.instruction.context";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    context?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    nav: null;
    logo: null;
  } | {
    _id: string;
    _type: "footerSettings";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    heading?: string;
    items?: Array<{
      heading?: string;
      description?: string;
      _type: "offering";
      _key: string;
    }>;
    email?: string;
    nav: Array<{
      _key: string;
      _type: "link";
      title?: string;
      linkType: "href" | "page";
      page: {
        type: "textPage";
        title: string | null;
        slug: string;
        isHome: false;
      } | {
        type: "homepage";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "offline";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "online";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | null;
      url?: string;
    }> | null;
  } | {
    _id: string;
    _type: "headerSettings";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    nav: Array<{
      _key: string;
      _type: "link";
      title?: string;
      linkType: "href" | "page";
      page: {
        type: "textPage";
        title: string | null;
        slug: string;
        isHome: false;
      } | {
        type: "homepage";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "offline";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "online";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | null;
      url?: string;
    }> | null;
    logo: null;
  } | {
    _id: string;
    _type: "homepage";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    modules?: Array<{
      _key: string;
    } & HeroModule | {
      _key: string;
    } & SplitTextModule | {
      _key: string;
    } & VideoModule>;
    seo?: Seo;
    nav: null;
    logo: null;
  } | {
    _id: string;
    _type: "offline";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    projects?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "project";
    }>;
    seo?: Seo;
    nav: null;
    logo: null;
  } | {
    _id: string;
    _type: "online";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    modules?: Array<{
      _key: string;
    } & ListModule | {
      _key: string;
    } & SliderModule | {
      _key: string;
    } & TextModule | {
      _key: string;
    } & VideoModule>;
    seo?: Seo;
    nav: null;
    logo: null;
  } | {
    _id: string;
    _type: "project";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title: string;
    rows?: Array<{
      images: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }>;
      text: SimplePortableText;
      _type: "row";
      _key: string;
    }>;
    nav: null;
    logo: null;
  } | {
    _id: string;
    _type: "sanity.fileAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    source?: SanityAssetSourceData;
    nav: null;
    logo: null;
  } | {
    _id: string;
    _type: "sanity.imageAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    metadata?: SanityImageMetadata;
    source?: SanityAssetSourceData;
    nav: null;
    logo: null;
  } | {
    _id: string;
    _type: "site";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    URL?: string;
    gtmID?: string;
    seo?: Seo;
    nav: null;
    logo: null;
  } | {
    _id: string;
    _type: "textPage";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug: Slug;
    body?: ComplexPortableText;
    seo?: Seo;
    nav: null;
    logo: null;
  } | null;
  footer: {
    logo: null;
    heading: null;
    email: null;
    items: null;
    nav: null;
  } | {
    logo: null;
    heading: null;
    email: null;
    items: null;
    nav: Array<{
      _key: string;
      _type: "link";
      title?: string;
      linkType: "href" | "page";
      page: {
        type: "textPage";
        title: string | null;
        slug: string;
        isHome: false;
      } | {
        type: "homepage";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "offline";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "online";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | null;
      url?: string;
    }> | null;
  } | {
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    heading: string | null;
    email: string | null;
    items: Array<{
      heading?: string;
      description?: string;
      _type: "offering";
      _key: string;
    }> | null;
    nav: Array<{
      _key: string;
      _type: "link";
      title?: string;
      linkType: "href" | "page";
      page: {
        type: "textPage";
        title: string | null;
        slug: string;
        isHome: false;
      } | {
        type: "homepage";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "offline";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "online";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | null;
      url?: string;
    }> | null;
  } | null;
};
// Variable: homeQuery
// Query: *[_type == "homepage" && _id ==  "homepage" ][0]{  ...,  "isHome": _id==homepage,  modules[]{      _type == 'splitTextModule' => {    _key,    _type,    headingLeft,    bodyLeft,    headingRight,    bodyRight,    linkLeft{        ...,    page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }    },    linkRight{        ...,    page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }    }  },  _type == 'videoModule' => {    _key,    _type,    image {        ...,  "width": asset->metadata.dimensions.width,  "height": asset->metadata.dimensions.height,  "aspectRatio": asset->metadata.dimensions.aspectRatio,    },    video,    text  },  _type == 'textModule' => {    ...  },  _type == 'listModule' => {    _key,    _type,    heading,    items[],    indent,    link {        ...,    page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }    }  },  _type == 'heroModule' => {    _key,    _type,    image {        ...,  "width": asset->metadata.dimensions.width,  "height": asset->metadata.dimensions.height,  "aspectRatio": asset->metadata.dimensions.aspectRatio,    },  },  _type == 'sliderModule' => {    _key,    _type,    items[] {      slideType,      image {          ...,  "width": asset->metadata.dimensions.width,  "height": asset->metadata.dimensions.height,  "aspectRatio": asset->metadata.dimensions.aspectRatio,      },      video,      caption,      heading,      body    }  }  }}
export type HomeQueryResult = {
  _id: string;
  _type: "homepage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  modules: Array<{
    _key: string;
    _type: "heroModule";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      width: number | null;
      height: number | null;
      aspectRatio: number | null;
    } | null;
  } | {
    _key: string;
    _type: "splitTextModule";
    headingLeft: string;
    bodyLeft: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        _key: string;
      } & Link>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    headingRight: string;
    bodyRight: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        _key: string;
      } & Link>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    linkLeft: {
      _type: "link";
      title?: string;
      linkType: "href" | "page";
      page: {
        type: "textPage";
        title: string | null;
        slug: string;
        isHome: false;
      } | {
        type: "homepage";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "offline";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "online";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | null;
      url?: string;
    } | null;
    linkRight: {
      _type: "link";
      title?: string;
      linkType: "href" | "page";
      page: {
        type: "textPage";
        title: string | null;
        slug: string;
        isHome: false;
      } | {
        type: "homepage";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "offline";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "online";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | null;
      url?: string;
    } | null;
  } | {
    _key: string;
    _type: "videoModule";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      width: number | null;
      height: number | null;
      aspectRatio: number | null;
    };
    video: string;
    text: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        _key: string;
      } & Link>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  }> | null;
  seo?: Seo;
  isHome: false;
} | null;
// Variable: onlineQuery
// Query: *[_type == "online" && _id ==  "online" ][0]{  ...,  "isHome": _id==homepage,  modules[]{      _type == 'splitTextModule' => {    _key,    _type,    headingLeft,    bodyLeft,    headingRight,    bodyRight,    linkLeft{        ...,    page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }    },    linkRight{        ...,    page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }    }  },  _type == 'videoModule' => {    _key,    _type,    image {        ...,  "width": asset->metadata.dimensions.width,  "height": asset->metadata.dimensions.height,  "aspectRatio": asset->metadata.dimensions.aspectRatio,    },    video,    text  },  _type == 'textModule' => {    ...  },  _type == 'listModule' => {    _key,    _type,    heading,    items[],    indent,    link {        ...,    page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }    }  },  _type == 'heroModule' => {    _key,    _type,    image {        ...,  "width": asset->metadata.dimensions.width,  "height": asset->metadata.dimensions.height,  "aspectRatio": asset->metadata.dimensions.aspectRatio,    },  },  _type == 'sliderModule' => {    _key,    _type,    items[] {      slideType,      image {          ...,  "width": asset->metadata.dimensions.width,  "height": asset->metadata.dimensions.height,  "aspectRatio": asset->metadata.dimensions.aspectRatio,      },      video,      caption,      heading,      body    }  }  }}
export type OnlineQueryResult = {
  _id: string;
  _type: "online";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  modules: Array<{
    _key: string;
    _type: "listModule";
    heading: string;
    items: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        _key: string;
      } & Link>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    indent: boolean | null;
    link: {
      _type: "link";
      title?: string;
      linkType: "href" | "page";
      page: {
        type: "textPage";
        title: string | null;
        slug: string;
        isHome: false;
      } | {
        type: "homepage";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "offline";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "online";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | null;
      url?: string;
    } | null;
  } | {
    _key: string;
    _type: "sliderModule";
    items: Array<{
      slideType: null;
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        width: number | null;
        height: number | null;
        aspectRatio: number | null;
      } | null;
      video: string | null;
      caption: string | null;
      heading: string;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs?: Array<{
          _key: string;
        } & Link>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
    }> | null;
  } | {
    _key: string;
    _type: "textModule";
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        _key: string;
      } & Link>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "videoModule";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      width: number | null;
      height: number | null;
      aspectRatio: number | null;
    };
    video: string;
    text: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        _key: string;
      } & Link>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  }> | null;
  seo?: Seo;
  isHome: false;
} | null;
// Variable: offlineQuery
// Query: *[_type == "offline" && _id ==  "offline" ][0]{  ...,  projects[]->{      _type,  _id,  slug,  title,  year,  rows[]{    _key,    text,    images[]{        ...,  "width": asset->metadata.dimensions.width,  "height": asset->metadata.dimensions.height,  "aspectRatio": asset->metadata.dimensions.aspectRatio,    }  }  }}
export type OfflineQueryResult = {
  _id: string;
  _type: "offline";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  projects: Array<{
    _type: "project";
    _id: string;
    slug: null;
    title: string;
    year: null;
    rows: Array<{
      _key: string;
      text: SimplePortableText;
      images: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
        width: number | null;
        height: number | null;
        aspectRatio: number | null;
      }>;
    }> | null;
  }> | null;
  seo?: Seo;
} | null;
// Variable: allTextPagesQuery
// Query: *[_type == "textPage" && defined(slug.current)] | order(date desc, _updatedAt desc) {    "slug": slug.current  }
export type AllTextPagesQueryResult = Array<{
  slug: string;
}>;
// Variable: getTextPageQuery
// Query: *[_type == "textPage" && slug.current == $slug] [0] {    _id,    _type,    title,    slug,    body[]{      ...,      markDefs[]{        ...,          page->{    "type": _type,    "title": title,    "slug": slug.current,    "isHome": _id==homepage,  }      }    },    seo{  ...,  metaTitle,  metaDesc,  shareTitle,  shareDesc,  shareGraphic}  }
export type GetTextPageQueryResult = {
  _id: string;
  _type: "textPage";
  title: string | null;
  slug: Slug;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs: Array<{
      _key: string;
      _type: "link";
      title?: string;
      linkType: "href" | "page";
      page: {
        type: "textPage";
        title: string | null;
        slug: string;
        isHome: false;
      } | {
        type: "homepage";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "offline";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | {
        type: "online";
        title: string | null;
        slug: string | null;
        isHome: false;
      } | null;
      url?: string;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    _type: "image";
    _key: string;
    markDefs: null;
  }> | null;
  seo: {
    _type: "seo";
    title: string;
    description?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      metadataBase?: string;
      _type: "image";
    };
    metaTitle: null;
    metaDesc: null;
    shareTitle: null;
    shareDesc: null;
    shareGraphic: null;
  } | null;
} | null;
// Variable: textPagesSlugs
// Query: *[_type == "textPage" && defined(slug.current)]  {"slug": slug.current}
export type TextPagesSlugsResult = Array<{
  slug: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_id == \"site\"][0]{\n  ...,\n  title,\n  URL,\n  gtmID,\n  seo{\n    \n  ...,\n  metaTitle,\n  metaDesc,\n  shareTitle,\n  shareDesc,\n  shareGraphic\n\n  }\n}": SettingsQueryResult;
    "{\n  \"header\": *[_id == \"headerSettings\"][0]{\n    \n  ...,\n  nav[]{\n    \n  ...,\n  \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n\n  },\n  logo\n\n  },\n  \"footer\": *[_id == \"footerSettings\"][0]{\n    \n  logo,\n  heading,\n  email,\n  items,\n  nav[]{\n    \n  ...,\n  \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n\n  }\n\n  }\n}": LayoutQueryResult;
    "*[_type == \"homepage\" && _id ==  \"homepage\" ][0]{\n  ...,\n  \"isHome\": _id==homepage,\n  modules[]{\n    \n  _type == 'splitTextModule' => {\n    _key,\n    _type,\n    headingLeft,\n    bodyLeft,\n    headingRight,\n    bodyRight,\n    linkLeft{\n      \n  ...,\n  \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n\n    },\n    linkRight{\n      \n  ...,\n  \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n\n    }\n  },\n  _type == 'videoModule' => {\n    _key,\n    _type,\n    image {\n      \n  ...,\n  \"width\": asset->metadata.dimensions.width,\n  \"height\": asset->metadata.dimensions.height,\n  \"aspectRatio\": asset->metadata.dimensions.aspectRatio,\n    },\n    video,\n    text\n  },\n  _type == 'textModule' => {\n    ...\n  },\n  _type == 'listModule' => {\n    _key,\n    _type,\n    heading,\n    items[],\n    indent,\n    link {\n      \n  ...,\n  \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n\n    }\n  },\n  _type == 'heroModule' => {\n    _key,\n    _type,\n    image {\n      \n  ...,\n  \"width\": asset->metadata.dimensions.width,\n  \"height\": asset->metadata.dimensions.height,\n  \"aspectRatio\": asset->metadata.dimensions.aspectRatio,\n    },\n  },\n  _type == 'sliderModule' => {\n    _key,\n    _type,\n    items[] {\n      slideType,\n      image {\n        \n  ...,\n  \"width\": asset->metadata.dimensions.width,\n  \"height\": asset->metadata.dimensions.height,\n  \"aspectRatio\": asset->metadata.dimensions.aspectRatio,\n      },\n      video,\n      caption,\n      heading,\n      body\n    }\n  }\n\n  }\n}": HomeQueryResult;
    "*[_type == \"online\" && _id ==  \"online\" ][0]{\n  ...,\n  \"isHome\": _id==homepage,\n  modules[]{\n    \n  _type == 'splitTextModule' => {\n    _key,\n    _type,\n    headingLeft,\n    bodyLeft,\n    headingRight,\n    bodyRight,\n    linkLeft{\n      \n  ...,\n  \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n\n    },\n    linkRight{\n      \n  ...,\n  \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n\n    }\n  },\n  _type == 'videoModule' => {\n    _key,\n    _type,\n    image {\n      \n  ...,\n  \"width\": asset->metadata.dimensions.width,\n  \"height\": asset->metadata.dimensions.height,\n  \"aspectRatio\": asset->metadata.dimensions.aspectRatio,\n    },\n    video,\n    text\n  },\n  _type == 'textModule' => {\n    ...\n  },\n  _type == 'listModule' => {\n    _key,\n    _type,\n    heading,\n    items[],\n    indent,\n    link {\n      \n  ...,\n  \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n\n    }\n  },\n  _type == 'heroModule' => {\n    _key,\n    _type,\n    image {\n      \n  ...,\n  \"width\": asset->metadata.dimensions.width,\n  \"height\": asset->metadata.dimensions.height,\n  \"aspectRatio\": asset->metadata.dimensions.aspectRatio,\n    },\n  },\n  _type == 'sliderModule' => {\n    _key,\n    _type,\n    items[] {\n      slideType,\n      image {\n        \n  ...,\n  \"width\": asset->metadata.dimensions.width,\n  \"height\": asset->metadata.dimensions.height,\n  \"aspectRatio\": asset->metadata.dimensions.aspectRatio,\n      },\n      video,\n      caption,\n      heading,\n      body\n    }\n  }\n\n  }\n}": OnlineQueryResult;
    "*[_type == \"offline\" && _id ==  \"offline\" ][0]{\n  ...,\n  projects[]->{\n    \n  _type,\n  _id,\n  slug,\n  title,\n  year,\n  rows[]{\n    _key,\n    text,\n    images[]{\n      \n  ...,\n  \"width\": asset->metadata.dimensions.width,\n  \"height\": asset->metadata.dimensions.height,\n  \"aspectRatio\": asset->metadata.dimensions.aspectRatio,\n    }\n  }\n\n  }\n}": OfflineQueryResult;
    "\n  *[_type == \"textPage\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \"slug\": slug.current\n  }\n": AllTextPagesQueryResult;
    "\n  *[_type == \"textPage\" && slug.current == $slug] [0] {\n    _id,\n    _type,\n    title,\n    slug,\n    body[]{\n      ...,\n      markDefs[]{\n        ...,\n        \n  page->{\n    \"type\": _type,\n    \"title\": title,\n    \"slug\": slug.current,\n    \"isHome\": _id==homepage,\n  }\n\n      }\n    },\n    seo{\n  ...,\n  metaTitle,\n  metaDesc,\n  shareTitle,\n  shareDesc,\n  shareGraphic\n}\n  }\n": GetTextPageQueryResult;
    "\n  *[_type == \"textPage\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": TextPagesSlugsResult;
  }
}
